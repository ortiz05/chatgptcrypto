version: '3.8'
services:
  web:
    build:
      context: .
      dockerfile: docker/web.Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      - db
      - redis

  profile_scanner:
    build:
      context: .
      dockerfile: docker/scanner.Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SCANNER_TYPE=profile
    depends_on:
      - db
      - redis
    deploy:
      replicas: 1

  boost_scanner:
    build:
      context: .
      dockerfile: docker/scanner.Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SCANNER_TYPE=boost
    depends_on:
      - db
      - redis
    deploy:
      replicas: 1

  pair_scanner:
    build:
      context: .
      dockerfile: docker/scanner.Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SCANNER_TYPE=pair
      - CHAIN_IDS=eth,bsc,arbitrum
    depends_on:
      - db
      - redis
    deploy:
      replicas: 3

  pool_scanner:
    build:
      context: .
      dockerfile: docker/scanner.Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SCANNER_TYPE=pool
    depends_on:
      - db
      - redis
    deploy:
      replicas: 3

  db:
    image: postgres:13
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=scanner_db
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:6
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
